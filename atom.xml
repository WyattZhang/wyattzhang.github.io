<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[5QBox]]></title>
  <link href="http://wyattzhang.github.io/atom.xml" rel="self"/>
  <link href="http://wyattzhang.github.io/"/>
  <updated>2014-11-23T17:02:31+08:00</updated>
  <id>http://wyattzhang.github.io/</id>
  <author>
    <name><![CDATA[5QBox]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[my 3 blog]]></title>
    <link href="http://wyattzhang.github.io/blog/2014/11/23/my-3-blog/"/>
    <updated>2014-11-23T02:56:10+08:00</updated>
    <id>http://wyattzhang.github.io/blog/2014/11/23/my-3-blog</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">reverse1</span><span class="p">(</span><span class="nl">str</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">end</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">revStr</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="k">for</span> <span class="kt">char</span> <span class="k">in</span> <span class="n">str</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">++</span><span class="n">end</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="o">--</span><span class="n">end</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">;</span> <span class="n">end</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">end</span><span class="o">--</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">revStr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="n">str</span><span class="p">)[</span><span class="n">end</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">revStr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;N&quot;</span> <span class="kt">as</span> <span class="n">Character</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">revStr</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">reverse1</span><span class="p">(</span><span class="s">&quot;abcd12345N&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">reverse</span><span class="p">(</span><span class="s">&quot;abcd12345N&quot;</span><span class="p">)</span>    <span class="c1">// defualt swift reverse function</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Second Post]]></title>
    <link href="http://wyattzhang.github.io/blog/2014/11/23/second-post/"/>
    <updated>2014-11-23T01:18:30+08:00</updated>
    <id>http://wyattzhang.github.io/blog/2014/11/23/second-post</id>
    <content type="html"><![CDATA[<h1>Test</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">//1.3 Design an algorithm and write code to remove the duplicate characters in a string without using any additional buffer NOTE: One or two additional variables are fine An extra copy of the array is not</span>
</span><span class='line'><span class="c1">//  Write the test cases for this method</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">removeDuplicates</span><span class="p">(</span><span class="k">var</span> <span class="nl">str</span><span class="p">:</span> <span class="p">[</span><span class="n">Character</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Character</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'><span class="k">let</span> <span class="n">strLen</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span>
</span><span class='line'><span class="k">if</span> <span class="n">strLen</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="p">{</span>
</span><span class='line'><span class="k">return</span> <span class="n">str</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="n">tail</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">.</span><span class="o">&lt;</span><span class="n">strLen</span> <span class="p">{</span>
</span><span class='line'><span class="k">var</span> <span class="nl">j</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'><span class="k">for</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">tail</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span> <span class="p">{</span>
</span><span class='line'><span class="k">if</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">str</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'><span class="k">break</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="n">tail</span> <span class="p">{</span>
</span><span class='line'><span class="n">str</span><span class="p">[</span><span class="n">tail</span><span class="p">]</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'><span class="o">++</span><span class="n">tail</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">tail</span> <span class="o">&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span> <span class="p">{</span>
</span><span class='line'><span class="n">str</span><span class="p">[</span><span class="n">tail</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\0</span><span class="s">&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">x</span> <span class="p">{</span>     <span class="c1">// Remove characters after &quot;\0&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="n">str</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;</span><span class="se">\0</span><span class="s">&quot;</span> <span class="p">{</span>
</span><span class='line'><span class="k">let</span> <span class="n">range</span> <span class="o">=</span> <span class="n">Range</span><span class="p">(</span><span class="nl">start</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span> <span class="nl">end</span><span class="p">:</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'><span class="n">str</span><span class="p">.</span><span class="n">removeRange</span><span class="p">(</span><span class="n">range</span><span class="p">)</span>
</span><span class='line'><span class="k">break</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">str</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;abcd&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;aaaa&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;aaabbbcc&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;abcabcabc&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://wyattzhang.github.io/blog/2014/11/23/first-post/"/>
    <updated>2014-11-23T01:18:30+08:00</updated>
    <id>http://wyattzhang.github.io/blog/2014/11/23/first-post</id>
    <content type="html"><![CDATA[<h1>Test</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">//1.3 Design an algorithm and write code to remove the duplicate characters in a string without using any additional buffer NOTE: One or two additional variables are fine An extra copy of the array is not</span>
</span><span class='line'><span class="c1">//  Write the test cases for this method</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">removeDuplicates</span><span class="p">(</span><span class="k">var</span> <span class="nl">str</span><span class="p">:</span> <span class="p">[</span><span class="n">Character</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Character</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'><span class="k">let</span> <span class="n">strLen</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span>
</span><span class='line'><span class="k">if</span> <span class="n">strLen</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="p">{</span>
</span><span class='line'><span class="k">return</span> <span class="n">str</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="n">tail</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">.</span><span class="o">&lt;</span><span class="n">strLen</span> <span class="p">{</span>
</span><span class='line'><span class="k">var</span> <span class="nl">j</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'><span class="k">for</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">tail</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span> <span class="p">{</span>
</span><span class='line'><span class="k">if</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">str</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'><span class="k">break</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="n">tail</span> <span class="p">{</span>
</span><span class='line'><span class="n">str</span><span class="p">[</span><span class="n">tail</span><span class="p">]</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'><span class="o">++</span><span class="n">tail</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">tail</span> <span class="o">&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span> <span class="p">{</span>
</span><span class='line'><span class="n">str</span><span class="p">[</span><span class="n">tail</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\0</span><span class="s">&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">x</span> <span class="p">{</span>     <span class="c1">// Remove characters after &quot;\0&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="n">str</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;</span><span class="se">\0</span><span class="s">&quot;</span> <span class="p">{</span>
</span><span class='line'><span class="k">let</span> <span class="n">range</span> <span class="o">=</span> <span class="n">Range</span><span class="p">(</span><span class="nl">start</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span> <span class="nl">end</span><span class="p">:</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'><span class="n">str</span><span class="p">.</span><span class="n">removeRange</span><span class="p">(</span><span class="n">range</span><span class="p">)</span>
</span><span class='line'><span class="k">break</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">str</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;abcd&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;aaaa&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;aaabbbcc&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;abcabcabc&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My 00 post]]></title>
    <link href="http://wyattzhang.github.io/blog/2014/11/20/my-00-post/"/>
    <updated>2014-11-20T15:08:00+08:00</updated>
    <id>http://wyattzhang.github.io/blog/2014/11/20/my-00-post</id>
    <content type="html"><![CDATA[<h1>aaa</h1>

<h2>aaa</h2>

<h1>aaa</h1>

<p>-aaaa
 -jaaa
 adfiban</p>

<p> adfaefa <code>a</code></p>

<p> <!-- more --></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">test</span><span class="p">(</span><span class="k">var</span> <span class="nl">a</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">])</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
