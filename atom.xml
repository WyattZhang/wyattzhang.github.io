<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[5QBox]]></title>
  <link href="http://www.5qbox.com/atom.xml" rel="self"/>
  <link href="http://www.5qbox.com/"/>
  <updated>2014-12-24T16:06:23+08:00</updated>
  <id>http://www.5qbox.com/</id>
  <author>
    <name><![CDATA[5Q]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cracking the Coding Interview Q1.3]]></title>
    <link href="http://www.5qbox.com/blog/2014/11/27/cracking-the-coding-interview-q1-dot-3/"/>
    <updated>2014-11-27T15:05:38+08:00</updated>
    <id>http://www.5qbox.com/blog/2014/11/27/cracking-the-coding-interview-q1-dot-3</id>
    <content type="html"><![CDATA[<h1>问题</h1>

<p>Q1.3 Design an algorithm and write code to remove the duplicate characters in a string without using any additional buffer NOTE: One or two additional variables are fine An extra copy of the array is not.</p>

<p>FOLLOW UP</p>

<p>Write the test cases for this method.</p>

<h1>解法一：</h1>

<p>从第二个字符开始比较，如果和前面已存在的字符相同，就把该字符置空，最后截掉空字符及其后续字符，时间复杂度为O(n<sup>2</sup>)。代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">removeDuplicates1</span><span class="p">(</span><span class="k">inout</span> <span class="nl">str</span><span class="p">:</span> <span class="p">[</span><span class="n">Character</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">strLen</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">strLen</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">tail</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span> <span class="p">..</span><span class="o">&lt;</span> <span class="n">strLen</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="nl">j</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">tail</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">str</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="n">tail</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">str</span><span class="p">[</span><span class="n">tail</span><span class="p">]</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="o">++</span><span class="n">tail</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">tail</span> <span class="o">&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">str</span><span class="p">[</span><span class="n">tail</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\0</span><span class="s">&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">for</span> <span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">x</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">str</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;</span><span class="se">\0</span><span class="s">&quot;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">range</span> <span class="o">=</span> <span class="n">Range</span><span class="p">(</span><span class="nl">start</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span> <span class="nl">end</span><span class="p">:</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'>            <span class="n">str</span><span class="p">.</span><span class="n">removeRange</span><span class="p">(</span><span class="n">range</span><span class="p">)</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试用例：注:<code>Array("string")</code>的作用是将string转换为Character数组</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">testCase1_1</span> <span class="o">=</span> <span class="n">Array</span><span class="p">(</span><span class="s">&quot;abcd&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">var</span> <span class="n">testCase1_2</span> <span class="o">=</span> <span class="n">Array</span><span class="p">(</span><span class="s">&quot;AAaaaa&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">var</span> <span class="n">testCase1_3</span> <span class="o">=</span> <span class="n">Array</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">var</span> <span class="n">testCase1_4</span> <span class="o">=</span> <span class="n">Array</span><span class="p">(</span><span class="s">&quot;aaabbbcc&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">var</span> <span class="n">testCase1_5</span> <span class="o">=</span> <span class="n">Array</span><span class="p">(</span><span class="s">&quot;abcabcabc&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">removeDuplicates1</span><span class="p">(</span><span class="o">&amp;</span><span class="n">testCase1_1</span><span class="p">)</span>
</span><span class='line'><span class="n">removeDuplicates1</span><span class="p">(</span><span class="o">&amp;</span><span class="n">testCase1_2</span><span class="p">)</span>
</span><span class='line'><span class="n">removeDuplicates1</span><span class="p">(</span><span class="o">&amp;</span><span class="n">testCase1_3</span><span class="p">)</span>
</span><span class='line'><span class="n">removeDuplicates1</span><span class="p">(</span><span class="o">&amp;</span><span class="n">testCase1_4</span><span class="p">)</span>
</span><span class='line'><span class="n">removeDuplicates1</span><span class="p">(</span><span class="o">&amp;</span><span class="n">testCase1_5</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">testCase1_1</span>
</span><span class='line'><span class="n">testCase1_2</span>
</span><span class='line'><span class="n">testCase1_3</span>
</span><span class='line'><span class="n">testCase1_4</span>
</span><span class='line'><span class="n">testCase1_5</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h1>解法二：</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cracking the Coding Interview Q1.2]]></title>
    <link href="http://www.5qbox.com/blog/2014/11/26/cracking-the-coding-interview-q1-dot-2/"/>
    <updated>2014-11-26T15:24:36+08:00</updated>
    <id>http://www.5qbox.com/blog/2014/11/26/cracking-the-coding-interview-q1-dot-2</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cracking the Coding Interview Q1.1]]></title>
    <link href="http://www.5qbox.com/blog/2014/11/25/cracking-the-coding-interview-q1-dot-1/"/>
    <updated>2014-11-25T18:23:30+08:00</updated>
    <id>http://www.5qbox.com/blog/2014/11/25/cracking-the-coding-interview-q1-dot-1</id>
    <content type="html"><![CDATA[<h1>问题</h1>

<p>Q1.1 Implement an algorithm to determine if a string has all unique characters What if you can not use additional data structures?</p>

<p>实现一个算法来判断一个字符串中的字符是否唯一，不能使用额外的数据结构。 (即只使用基本的数据结构)</p>

<h1>解法一：</h1>

<p>简单起见我们假设字符串中的字符属于ASCII字符集(其它字符集类似)，那么我们建立一个256元素的Bool数组，并全部初始化为false。遍历字符串中的字符，当字符编码所对应的数组元素为true时，说明存在重复字符，否则将该对应位置的数组元素标记为true。算法时间复杂度为O(n)。</p>

<p><strong>注：Swift里Char和String均为Unicode，这点和C++不同，所以遍历字符串中的字符时需要使用<code>for char in str.unicodeScalars</code>，并且需要将Char类型的value强制转换为Int <code>Int(char.value)</code>来对应Bool数组的下标。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">isUniqueChar1</span><span class="p">(</span><span class="nl">str</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">char_set</span> <span class="o">=</span> <span class="p">[</span><span class="n">Bool</span><span class="p">](</span><span class="nl">count</span><span class="p">:</span> <span class="mi">256</span><span class="p">,</span> <span class="nl">repeatedValue</span><span class="p">:</span> <span class="nb">false</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="kt">char</span> <span class="k">in</span> <span class="n">str</span><span class="p">.</span><span class="n">unicodeScalars</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">char_set</span><span class="p">[</span><span class="n">Int</span><span class="p">(</span><span class="kt">char</span><span class="p">.</span><span class="n">value</span><span class="p">)]</span> <span class="o">==</span> <span class="nb">true</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">false</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">char_set</span><span class="p">[</span><span class="n">Int</span><span class="p">(</span><span class="kt">char</span><span class="p">.</span><span class="n">value</span><span class="p">)]</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">isUniqueChar1</span><span class="p">(</span><span class="s">&quot;abcd&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">isUniqueChar1</span><span class="p">(</span><span class="s">&quot;abcdd&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>解法二</h1>

<p>解法二与解法一类似，只是将用Bool数组来表示是否出现过重复改成了用位运算，减少了一些空间使用量，本质并没有区别。我使用的MBA2013mid是Core i5 64bit CPU所以<code>Int = Int64</code>(Swift同样可以用sizeof()查看，<code>sizeof(Int) = sizeof(Int64) = 8 bytes</code>)，256个字符就只需要使用4个Int64来记录。代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">isUniqueChar2</span><span class="p">(</span><span class="nl">str</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="n">Int</span><span class="p">](</span><span class="nl">count</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="nl">repeatedValue</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">// 4 * 64bit = 256</span>
</span><span class='line'>    <span class="k">for</span> <span class="kt">char</span> <span class="k">in</span> <span class="n">str</span><span class="p">.</span><span class="n">unicodeScalars</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="nl">idx</span><span class="p">:</span> <span class="n">Int</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="kt">char</span><span class="p">.</span><span class="n">value</span> <span class="o">/</span> <span class="mi">64</span><span class="p">)</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">shift</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="kt">char</span><span class="p">.</span><span class="n">value</span> <span class="o">%</span> <span class="mi">64</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">shift</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">false</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">|=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">shift</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">isUniqueChar2</span><span class="p">(</span><span class="s">&quot;abcd&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">isUniqueChar2</span><span class="p">(</span><span class="s">&quot;abccd&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong>完整的解题目录：<a href="http://www.5qbox.com/blog/2014/11/23/solutions-for-cracking-the-coding-interview-written-in-swift/">Solutions for Cracking The Coding Interview Written in Swift</a></strong></p>

<p><strong>全部代码托管在Github：<a href="https://github.com/WyattZhang/CTCI">https://github.com/WyattZhang/CTCI</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quicksort Written in Swift]]></title>
    <link href="http://www.5qbox.com/blog/2014/11/24/quicksort-written-in-swift/"/>
    <updated>2014-11-24T15:20:40+08:00</updated>
    <id>http://www.5qbox.com/blog/2014/11/24/quicksort-written-in-swift</id>
    <content type="html"><![CDATA[<p>Quicksort是一种常用的排序算法，很多语言内置的sort函数都是使用quicksort算法(或其改进，如Java7)。</p>

<blockquote><p>From Wikipedia : <a href="http://en.wikipedia.org/wiki/Quicksort">Quicksort</a></p>

<p>Quicksort in action on a list of numbers. The horizontal lines are pivot values.
Visualization of the quicksort algorithm. The horizontal lines are pivot values.
Class   Sorting algorithm
Worst case performance  O(n<sup>2</sup>)
Best case performance   O(nlogn) (simple partition)
or O(n) (three-way partition and equal keys)
Average case performance    O(nlogn)
Worst case space complexity O(n) auxiliary (stable)
O(logn) auxiliary (in-place)
Quicksort, or partition-exchange sort, is a sorting algorithm developed by Tony Hoare that, on average, makes O(nlogn) comparisons to sort n items. In the worst case, it makes O(n<sup>2</sup>) comparisons, though this behavior is rare. Quicksort is often faster in practice than other O(nlogn) algorithms. Additionally, quicksort&rsquo;s sequential and localized memory references work well with a cache. Quicksort is a comparison sort and, in efficient implementations, is not a stable sort. Quicksort can be implemented with an in-place partitioning algorithm, so the entire sort can be done with only O(logn) additional space used by the stack during the recursion.</p></blockquote>

<p>一个标准版本的quicksort代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// Standard version quicksort</span>
</span><span class='line'><span class="k">func</span> <span class="n">partition</span><span class="p">(</span><span class="k">inout</span> <span class="nl">dataList</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">],</span> <span class="nl">low</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">high</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">pivotPos</span> <span class="o">=</span> <span class="n">low</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">dataList</span><span class="p">[</span><span class="n">low</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="k">var</span> <span class="n">i</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">dataList</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">pivot</span> <span class="o">&amp;&amp;</span> <span class="o">++</span><span class="n">pivotPos</span> <span class="o">!=</span> <span class="n">i</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dataList</span><span class="p">[</span><span class="n">pivotPos</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">dataList</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dataList</span><span class="p">[</span><span class="n">low</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">dataList</span><span class="p">[</span><span class="n">pivotPos</span><span class="p">])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">pivotPos</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">quickSort</span><span class="p">(</span><span class="k">inout</span> <span class="nl">dataList</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">],</span> <span class="nl">left</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">right</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="kr">left</span> <span class="o">&lt;</span> <span class="kr">right</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">pivotPos</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dataList</span><span class="p">,</span> <span class="kr">left</span><span class="p">,</span> <span class="kr">right</span><span class="p">)</span>
</span><span class='line'>        <span class="n">quickSort</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dataList</span><span class="p">,</span> <span class="kr">left</span><span class="p">,</span> <span class="n">pivotPos</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">quickSort</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dataList</span><span class="p">,</span> <span class="n">pivotPos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="kr">right</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">dataList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">42</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="n">quickSort</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dataList</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">dataList</span><span class="p">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Swift语言引入了泛型，下面是一个泛型版本的quicksort代码：
(注：Swift中任何conform <code>Comparable</code> protocol的类型至少要重载<code>&lt;</code>和<code>==</code>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// Generic version quickSort</span>
</span><span class='line'><span class="k">func</span> <span class="n">partition</span><span class="o">&lt;</span><span class="nl">T</span><span class="p">:</span> <span class="n">Comparable</span><span class="o">&gt;</span><span class="p">(</span><span class="k">inout</span> <span class="nl">dataList</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">],</span> <span class="nl">low</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">high</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">pivotPos</span> <span class="o">=</span> <span class="n">low</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">dataList</span><span class="p">[</span><span class="n">low</span><span class="p">]</span>
</span><span class='line'>    <span class="k">for</span> <span class="k">var</span> <span class="n">i</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">dataList</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">pivot</span> <span class="o">&amp;&amp;</span> <span class="o">++</span><span class="n">pivotPos</span> <span class="o">!=</span> <span class="n">i</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dataList</span><span class="p">[</span><span class="n">pivotPos</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">dataList</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dataList</span><span class="p">[</span><span class="n">low</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">dataList</span><span class="p">[</span><span class="n">pivotPos</span><span class="p">])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">pivotPos</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">quickSort</span><span class="o">&lt;</span><span class="nl">T</span><span class="p">:</span> <span class="n">Comparable</span><span class="o">&gt;</span><span class="p">(</span><span class="k">inout</span> <span class="nl">dataList</span><span class="p">:</span> <span class="p">[</span><span class="n">T</span><span class="p">],</span> <span class="nl">left</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">right</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="kr">left</span> <span class="o">&lt;</span> <span class="kr">right</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">pivotPos</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dataList</span><span class="p">,</span> <span class="kr">left</span><span class="p">,</span> <span class="kr">right</span><span class="p">)</span>
</span><span class='line'>        <span class="n">quickSort</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dataList</span><span class="p">,</span> <span class="kr">left</span><span class="p">,</span> <span class="n">pivotPos</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">quickSort</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dataList</span><span class="p">,</span> <span class="n">pivotPos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="kr">right</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="nl">Vector</span><span class="p">:</span> <span class="n">Comparable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">x</span><span class="p">:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">y</span><span class="p">:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="o">&lt;</span><span class="p">(</span><span class="nl">p</span><span class="p">:</span> <span class="n">Vector</span><span class="p">,</span> <span class="nl">q</span><span class="p">:</span> <span class="n">Vector</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">q</span><span class="p">.</span><span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="n">q</span><span class="p">.</span><span class="n">y</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="o">==</span><span class="p">(</span><span class="nl">p</span><span class="p">:</span> <span class="n">Vector</span><span class="p">,</span> <span class="nl">q</span><span class="p">:</span><span class="n">Vector</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">==</span> <span class="n">q</span><span class="p">.</span><span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span> <span class="o">==</span> <span class="n">q</span><span class="p">.</span><span class="n">y</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">42</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="k">var</span> <span class="n">strings</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">,</span> <span class="s">&quot;Z&quot;</span><span class="p">,</span> <span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="s">&quot; &quot;</span><span class="p">,</span> <span class="s">&quot;&gt;&quot;</span><span class="p">,</span> <span class="s">&quot;89&quot;</span><span class="p">,</span> <span class="s">&quot;1&quot;</span><span class="p">,</span> <span class="s">&quot;y&quot;</span><span class="p">,</span> <span class="s">&quot;Y&quot;</span><span class="p">,</span> <span class="s">&quot;&amp;&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">var</span> <span class="n">vectors</span> <span class="o">=</span> <span class="p">[</span><span class="n">Vector</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mf">2.0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mf">2.0</span><span class="p">),</span> <span class="n">Vector</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mf">3.0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mf">3.0</span><span class="p">),</span> <span class="n">Vector</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">quickSort</span><span class="p">(</span><span class="o">&amp;</span><span class="n">numbers</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">numbers</span><span class="p">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">quickSort</span><span class="p">(</span><span class="o">&amp;</span><span class="n">strings</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">strings</span><span class="p">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">quickSort</span><span class="p">(</span><span class="o">&amp;</span><span class="n">vectors</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">vectors</span><span class="p">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solutions for Cracking the Coding Interview Written in Swift]]></title>
    <link href="http://www.5qbox.com/blog/2014/11/23/solutions-for-cracking-the-coding-interview-written-in-swift/"/>
    <updated>2014-11-23T11:43:45+08:00</updated>
    <id>http://www.5qbox.com/blog/2014/11/23/solutions-for-cracking-the-coding-interview-written-in-swift</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>最近需要复习一下常用的数据结构和算法，又打算了解一下Apple新发布的Swift语言，于是便产生了用Swift把书中习题过一遍的想法。本文是《Cracking The Coding Interview, Fourth Edition》问题与解答的汇总，其中代码部分采用Swift编写。《Cracking The Coding Interview》是一本被许多人推荐的书，坊间也称为CTCI或CC150(与Leetcode150对应)， 详情可见：<a href="http://www.careercup.com/book">http://www.careercup.com/book</a> 。原书中解法大部分采用Java编写，我在用Swift解答的过程中除参(chao)考(xi)原书解法外还参(chao)考(xi)了<a href="http://www.hawstein.com/posts/ctci-solutions-contents.html">Hawstein的C++解法</a>，在此一并感谢。</p>

<h1>说明</h1>

<ul>
<li>所有源码均托管在<a href="https://github.com/WyattZhang/CTCI">Github</a>，请毫不留情的Follow，Star，Watch，Fork，Issue及Pull Request;</li>
<li>Swift结合Xcode playground后类似解释型脚本语言的特性非常适合验证算法及跟踪算法运行的过程，因此本文所有代码均为playground code snippet;</li>
<li><code>.playground</code>文件实际是一个package，push到Github后会被拆分成三个文件，源码在<code>.swift</code>里，简单起见建议直接<code>git clone</code>整个项目后运行。</li>
<li>Swift是一门新生语言，语法特性还不稳定，Apple的《The Swift Programing Language》从发布到我写这篇文章时一直在revision。一些几个月前的代码在Xcode更新到6.1后运行已经开始报错，需要改写。本文里的code snippet在发布时均在Xcode6.1的Playground里调试通过，如果未来运行报错，请首先去官网查看Swift的reference，确定是否由语法改变引起，然后留言给我或直接在Github提Issue和PR;</li>
<li>部分代码使用了一些Swift新特性，如用tuple做swap<code>(a, b) = (b, a)</code>,用<code>advance()</code>模拟C的字符指针等，具体到题目里会详细写出;</li>
<li>如我的答案有错误或有其它更优的解法，欢迎讨论，<a href="http://www.5qbox.com/blog/2014/11/22/hello-octopress/">这也是建立这个blog的初衷</a>；如果碰巧对你还有了点帮助，请简单粗暴的感谢我。</li>
</ul>


<h1>目录</h1>

<h2>Part1 : Data Structures</h2>

<hr />

<h3>Chapter 1 | Arrays and Strings</h3>

<p>1.1 <a href="http://www.5qbox.com/blog/2014/11/25/cracking-the-coding-interview-q1-dot-1/">Implement an algorithm to determine if a string has all unique characters What if you can not use additional data structures?</a></p>

<p>1.2 <a href="http://www.5qbox.com/blog/2014/11/26/cracking-the-coding-interview-q1-dot-2/">Write code to reverse a C-Style String (C-String means that “abcd” is represented as five characters, including the null character )</a></p>

<p>1.3 <a href="http://www.5qbox.com/blog/2014/11/27/cracking-the-coding-interview-q1-dot-3/">Design an algorithm and write code to remove the duplicate characters in a string without using any additional buffer. NOTE: One or two additional variables are fine. An extra copy of the array is not. FOLLOW UP Write the test cases for this method.</a></p>

<!-- more -->


<h2>Part 2 : Concepts and Algorithms</h2>

<hr />

<h3>Chapter 9 | Sorting and Searching</h3>

<p>Fundamental : <a href="http://www.5qbox.com/blog/2014/11/24/quicksort-written-in-swift/">Quicksort written in swift</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://www.5qbox.com/blog/2014/11/22/hello-octopress/"/>
    <updated>2014-11-22T15:08:58+08:00</updated>
    <id>http://www.5qbox.com/blog/2014/11/22/hello-octopress</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
