<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[5QBox]]></title>
  <link href="http://www.5qbox.com/atom.xml" rel="self"/>
  <link href="http://www.5qbox.com/"/>
  <updated>2014-11-27T14:49:25+08:00</updated>
  <id>http://www.5qbox.com/</id>
  <author>
    <name><![CDATA[5Q]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cracking the Coding interview--Q1.1]]></title>
    <link href="http://www.5qbox.com/blog/2014/11/25/cracking-the-coding-interview-q1-dot-1/"/>
    <updated>2014-11-25T18:23:30+08:00</updated>
    <id>http://www.5qbox.com/blog/2014/11/25/cracking-the-coding-interview-q1-dot-1</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solutions for Cracking the Coding Interview Written in Swift]]></title>
    <link href="http://www.5qbox.com/blog/2014/11/25/solutions-for-cracking-the-coding-interview-written-in-swift/"/>
    <updated>2014-11-25T11:43:45+08:00</updated>
    <id>http://www.5qbox.com/blog/2014/11/25/solutions-for-cracking-the-coding-interview-written-in-swift</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>最近需要复习一下常用的数据结构和算法，又打算了解一下Apple新发布的Swift语言，于是便产生了用Swift把书中习题过一遍的想法。本文是《Cracking The Coding Interview, Fourth Edition》问题与解答的汇总，其中代码部分采用Swift编写。《Cracking The Coding Interview》是一本被许多人推荐的书，坊间也称为CTCI或CC150(与Leetcode150对应)， 详情可见：<a href="http://www.careercup.com/book">http://www.careercup.com/book</a> 。原书中答案大部分采用Java编写，我在用Swift做题的过程中除参(chao)考(xi)原书解答外还参(chao)考(xi)了<a href="http://www.hawstein.com/posts/ctci-solutions-contents.html">Hawstein的C++方案</a>，在此一并感谢。</p>

<h1>说明</h1>

<ul>
<li>所有源码均托管在<a href="https://github.com/WyattZhang/CTCI">Github</a>，请毫不留情的Follow，Star，Watch，Fork，Issue及Pull Request;</li>
<li>Swift结合Xcode playground后类似解释型脚本语言的特性非常适合验证算法及跟踪算法运行的过程，因此本文所有代码均为playground code snippet;</li>
<li><code>.playground</code>push到Github会被拆分成三个文件，源码在<code>.swift</code>里，简单起见建议直接<code>git clone</code>后运行。</li>
<li>Swift是一门新生语言，语法特性还不稳定，Apple的《The Swift Programing Language》从发布到我写这篇文章时一直在revision。一些几个月前的代码在Xcode更新到6.1后运行已经开始报错，需要改写。本文里的code snippet在发布时均在Xcode6.1的Playground里调试通过，如果未来运行报错，请首先去官网查看Swift的reference，确定是否由语法改变引起，然后留言给我或直接在Github提Issue和PR;</li>
<li>部分代码使用了一些Swift新特性，如用tuple做swap<code>(a, b) = (b, a)</code>,用<code>advance()</code>模拟C的字符指针等，具体到题目里会详细写出;</li>
<li>如我的答案有错误或有其它更优的解法，欢迎讨论，<a href="">这也是建立这个blog的初衷</a>；如果碰巧对你还有了点帮助，请简单粗暴的感谢我。</li>
</ul>


<h1>目录</h1>

<h2>Part1 : Data Structures</h2>

<h3>Chapter 1 | Arrays and Strings</h3>

<p>1.1 <a href="http://www.5qbox.com/blog/2014/11/20/my-00-post/">Implement an algorithm to determine if a string has all unique characters What if you can not use additional data structures?</a></p>

<!-- more -->


<p>1.2 <a href="http://www.5qbox.com/blog/2014/11/20/my-00-post/">Write code to reverse a C-Style String (C-String means that “abcd” is represented as five characters, including the null character )</a></p>

<p>1.3 <a href="http://www.5qbox.com/blog/2014/11/20/my-00-post/">Design an algorithm and write code to remove the duplicate characters in a string without using any additional buffer. NOTE: One or two additional variables are fine. An extra copy of the array is not. FOLLOW UP Write the test cases for this method.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zombie Ninjas Attack: A Survivor's Retrospective]]></title>
    <link href="http://www.5qbox.com/blog/2014/11/23/zombie-ninjas-attack-a-survivors-retrospective/"/>
    <updated>2014-11-23T21:21:42+08:00</updated>
    <id>http://www.5qbox.com/blog/2014/11/23/zombie-ninjas-attack-a-survivors-retrospective</id>
    <content type="html"><![CDATA[<h1>test</h1>

<p><code>a</code>
<code>l</code></p>

<p><code>l</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My 3 Blog]]></title>
    <link href="http://www.5qbox.com/blog/2014/11/23/my-3-blog/"/>
    <updated>2014-11-23T02:56:10+08:00</updated>
    <id>http://www.5qbox.com/blog/2014/11/23/my-3-blog</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">reverse1</span><span class="p">(</span><span class="nl">str</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">end</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">revStr</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="k">for</span> <span class="kt">char</span> <span class="k">in</span> <span class="n">str</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">++</span><span class="n">end</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="o">--</span><span class="n">end</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">;</span> <span class="n">end</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">end</span><span class="o">--</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">revStr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="n">str</span><span class="p">)[</span><span class="n">end</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">revStr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;N&quot;</span> <span class="kt">as</span> <span class="n">Character</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">revStr</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">reverse1</span><span class="p">(</span><span class="s">&quot;abcd12345N&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">reverse</span><span class="p">(</span><span class="s">&quot;abcd12345N&quot;</span><span class="p">)</span>    <span class="c1">// defualt swift reverse function</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Second Post]]></title>
    <link href="http://www.5qbox.com/blog/2014/11/23/second-post/"/>
    <updated>2014-11-23T01:18:30+08:00</updated>
    <id>http://www.5qbox.com/blog/2014/11/23/second-post</id>
    <content type="html"><![CDATA[<h1>Test</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span>
</span></code></pre></td></tr></table></div></figure>


<p>作为可视化开发的工具，IB 和 Storyboard 在组织和构建 ViewController 及其导航关系时已经做得很好的。对于 ViewController 的 view 画布上的诸如 UILabel 或者 UIImageView 这样的基础的类，IB 是能够很好地支持并实时在设计的时候进行显示的。但是对于那些自定义的类，之前的 IB 就束手无策了。我们能做的仅仅是在 IB 中拖放一个 UIView，然后通过将 Custom Class 属性设置为我们自定义的 UIView 的子类来在 “暗示” IB 在运行时初始化一个对应的子类。这样的问题是在开发自定义的 view 时，我们不得不一遍遍地修改代码并运行，再根据运行结果进行调整和修正。而实际上，单一对某个 view 的调试这种问题只涉及到设计层面，而非运行层面，如果我们能够在设计时就有一个实时地对自定义 view 的预览该多好。</p>

<p>没错，Apple 也是这么想的，并且在 Xcode 6 中，我们就已经可以创建这样的 UIView 子类了：利用新加入的 @IBDesignable 和 @IBInspectable，我们可以非常方便地完成在 IB 中实时显示自定义视图，甚至和其他一些内置 UIView 子类一样，直接在 IB 的 Inspector 改变某些属性，甚至我们还能通过设置断点来在 IB 中显示视图时进行调试。新的这些特性非常强大，使用起来却出乎意料的简单。下面我将通过一个实际的小例子加以说明。最终的完整例子已经放在 GitHub 上了，现在我们从开始一步步开始吧。这些代码基于 Xcode 6.1 和 Swift 1.1。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">//1.3 Design an algorithm and write code to remove the duplicate characters in a string without using any additional buffer NOTE: One or two additional variables are fine An extra copy of the array is not</span>
</span><span class='line'><span class="c1">//  Write the test cases for this method</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">removeDuplicates</span><span class="p">(</span><span class="k">var</span> <span class="nl">str</span><span class="p">:</span> <span class="p">[</span><span class="n">Character</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Character</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'><span class="k">let</span> <span class="n">strLen</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span>
</span><span class='line'><span class="k">if</span> <span class="n">strLen</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="p">{</span>
</span><span class='line'><span class="k">return</span> <span class="n">str</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="n">tail</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">.</span><span class="o">&lt;</span><span class="n">strLen</span> <span class="p">{</span>
</span><span class='line'><span class="k">var</span> <span class="nl">j</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'><span class="k">for</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">tail</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span> <span class="p">{</span>
</span><span class='line'><span class="k">if</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">str</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'><span class="k">break</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="n">tail</span> <span class="p">{</span>
</span><span class='line'><span class="n">str</span><span class="p">[</span><span class="n">tail</span><span class="p">]</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'><span class="o">++</span><span class="n">tail</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">tail</span> <span class="o">&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span> <span class="p">{</span>
</span><span class='line'><span class="n">str</span><span class="p">[</span><span class="n">tail</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\0</span><span class="s">&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">x</span> <span class="p">{</span>     <span class="c1">// Remove characters after &quot;\0&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="n">str</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;</span><span class="se">\0</span><span class="s">&quot;</span> <span class="p">{</span>
</span><span class='line'><span class="k">let</span> <span class="n">range</span> <span class="o">=</span> <span class="n">Range</span><span class="p">(</span><span class="nl">start</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span> <span class="nl">end</span><span class="p">:</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'><span class="n">str</span><span class="p">.</span><span class="n">removeRange</span><span class="p">(</span><span class="n">range</span><span class="p">)</span>
</span><span class='line'><span class="k">break</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">str</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;abcd&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;aaaa&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;aaabbbcc&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;abcabcabc&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://www.5qbox.com/blog/2014/11/23/first-post/"/>
    <updated>2014-11-23T01:18:30+08:00</updated>
    <id>http://www.5qbox.com/blog/2014/11/23/first-post</id>
    <content type="html"><![CDATA[<h1>Test</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">//1.3 Design an algorithm and write code to remove the duplicate characters in a string without using any additional buffer NOTE: One or two additional variables are fine An extra copy of the array is not</span>
</span><span class='line'><span class="c1">//  Write the test cases for this method</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">removeDuplicates</span><span class="p">(</span><span class="k">var</span> <span class="nl">str</span><span class="p">:</span> <span class="p">[</span><span class="n">Character</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Character</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'><span class="k">let</span> <span class="n">strLen</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span>
</span><span class='line'><span class="k">if</span> <span class="n">strLen</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="p">{</span>
</span><span class='line'><span class="k">return</span> <span class="n">str</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="n">tail</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">.</span><span class="o">&lt;</span><span class="n">strLen</span> <span class="p">{</span>
</span><span class='line'><span class="k">var</span> <span class="nl">j</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'><span class="k">for</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">tail</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span> <span class="p">{</span>
</span><span class='line'><span class="k">if</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">str</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'><span class="k">break</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="n">tail</span> <span class="p">{</span>
</span><span class='line'><span class="n">str</span><span class="p">[</span><span class="n">tail</span><span class="p">]</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'><span class="o">++</span><span class="n">tail</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">tail</span> <span class="o">&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span> <span class="p">{</span>
</span><span class='line'><span class="n">str</span><span class="p">[</span><span class="n">tail</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\0</span><span class="s">&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">x</span> <span class="p">{</span>     <span class="c1">// Remove characters after &quot;\0&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="n">str</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;</span><span class="se">\0</span><span class="s">&quot;</span> <span class="p">{</span>
</span><span class='line'><span class="k">let</span> <span class="n">range</span> <span class="o">=</span> <span class="n">Range</span><span class="p">(</span><span class="nl">start</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span> <span class="nl">end</span><span class="p">:</span> <span class="n">str</span><span class="p">.</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'><span class="n">str</span><span class="p">.</span><span class="n">removeRange</span><span class="p">(</span><span class="n">range</span><span class="p">)</span>
</span><span class='line'><span class="k">break</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">str</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;abcd&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;aaaa&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;aaabbbcc&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">removeDuplicates</span><span class="p">(</span><span class="n">Array</span><span class="p">(</span><span class="s">&quot;abcabcabc&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My 00 Post]]></title>
    <link href="http://www.5qbox.com/blog/2014/11/20/my-00-post/"/>
    <updated>2014-11-20T15:08:00+08:00</updated>
    <id>http://www.5qbox.com/blog/2014/11/20/my-00-post</id>
    <content type="html"><![CDATA[<h1>aaa</h1>

<h2>aaa</h2>

<h1>aaa</h1>

<p>-aaaa
 -jaaa
 adfiban</p>

<p> adfaefa <code>a</code></p>

<p> <!-- more --></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">test</span><span class="p">(</span><span class="k">var</span> <span class="nl">a</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">])</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
